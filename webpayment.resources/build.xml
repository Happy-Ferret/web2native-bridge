<project name="Web2Native Bridge - Web Payment Support" default="help" basedir=".">

  <!-- set properties for this build -->
  <property name="src.dir" value="src"/>
  
  <property name="cardimage.dir" location="card-images"/>

  <property name="temp.dir" location=".tmp"/>
  <property name="credentials" location="credentials/sks.serialized"/>
  <property name="testpage" location="../webpayment.client/test/test.html"/>
  
  <property file="../webpayment.resources/common.properties"/>
  
  <condition property="bank.host" value="https://localhost:8442" else="https://mobilepki.org">
    <isset property="localhost"/>
  </condition>
  
  <condition property="storetype" value="PKCS12" else="JKS">
    <matches pattern=".*\.p12$" string="${keyfilext}"/>
  </condition>
  
  <property name="javaversion" value="1.7" />
  <property name="debug" value="on"/>
  
  <property environment="env"/>
  <property name="catalina.home" value="${env.CATALINA_HOME}"/>

  <path id="compile.classpath">
     <fileset dir="${common.lib.dir}">
       <include name="*.jar"/>
    </fileset>
  </path>
  
  <target name="help">
      <echo message="createcerts initwallet [-Dlocalhost=0] inittestpage svg-pullmode"/>
  </target>
 
  <target name="inittestpage">
    <delete file="${testpage}"/>
    <delete dir="${temp.dir}"/>
    <mkdir dir="${temp.dir}"/>
    <javac debug="${debug}"
           source="${javaversion}"
           target="${javaversion}"
           srcdir="${src.dir}:${common.src.dir}"
           destdir="${temp.dir}" 
           classpathref="compile.classpath"
           includeAntRuntime="false">
    </javac>
    <java fork="yes"
          classname="org.webpki.w2nb.webpayment.resources.InitTestPage"
          dir="${key.dir}"
          failonerror="true">
        <classpath>
             <fileset dir="${common.lib.dir}">
                <include name="*.jar"/>
             </fileset>
             <pathelement location="${temp.dir}"/>
        </classpath>
        <arg value="${testpage}"/>
        <arg value="${merchantkey}${keyfilext}"/>
        <arg value="${keypassword}"/>
        <arg value="${w2nb.name}"/>
    </java>
  </target>

  <target name="_svg">
    <property name="svgfilters" value=""/>
    <delete dir="${temp.dir}"/>
    <mkdir dir="${temp.dir}"/>
    <javac debug="${debug}"
           source="${javaversion}"
           target="${javaversion}"
           srcdir="${src.dir}:${common.src.dir}"
           destdir="${temp.dir}" 
           classpathref="compile.classpath"
           includeAntRuntime="false">
    </javac>
    <java fork="yes"
          classname="org.webpki.w2nb.webpayment.resources.svg.SVG"
          dir="."
          failonerror="true">
        <classpath>
             <fileset dir="${common.lib.dir}">
                <include name="*.jar"/>
             </fileset>
             <pathelement location="${temp.dir}"/>
        </classpath>
        <arg line="${svgfile} ${svgclass} ${svgfilters}"/>
    </java>
  </target>
  
  <target name="svg-pullmode">
    <antcall target="_svg">
       <param name="svgfile" value="svg-gen/pullmode.svg"/>
       <param name="svgclass" value="org.webpki.w2nb.webpayment.resources.svg.diagrams.PullMode"/>
       <param name="svgfilters" value="svg-filters/wallet-filters.xml"/>
       </antcall>
  </target>
  
  <target name="_import">
    <java fork="yes"
          classname="org.webpki.w2nb.webpayment.resources.InitWallet"
          dir="${key.dir}"
          failonerror="true">
        <classpath>
             <fileset dir="${common.lib.dir}">
                <include name="*.jar"/>
             </fileset>
             <pathelement location="${temp.dir}"/>
        </classpath>
        <arg value="${credentials}"/>
        <arg value="${sks.certificate}${keyfilext}"/>
        <arg value="${keypassword}"/>
        <arg value="${sks.pin}"/>
        <arg value="${card.type}"/>
        <arg value="${card.number}"/>
        <arg value="${bank.host}/webpay-bank/transact"/>
        <arg value="${cardimage.dir}/${sks.image}"/>
        <arg value="${sks.encryption}.cer"/>
    </java>
  </target>

  <target name="initwallet">
    <delete file="${credentials}"/>
    <delete dir="${temp.dir}"/>
    <mkdir dir="${temp.dir}"/>
    <javac debug="${debug}"
           source="${javaversion}"
           target="${javaversion}"
           srcdir="${src.dir}:${common.src.dir}"
           destdir="${temp.dir}" 
           classpathref="compile.classpath"
           includeAntRuntime="false">
    </javac>
    <antcall target="_import">
       <param name="sks.certificate" value="${clientkey_ec}"/>
       <param name="sks.pin" value="1234"/>
       <param name="card.type" value="SuperCard"/>
       <param name="card.number" value="6875056745552109"/>
       <param name="sks.image" value="supercard.png"/>
       <param name="sks.encryption" value="${encryptionkey_rsa}"/>
    </antcall>
    <antcall target="_import">
       <param name="sks.certificate" value="${clientkey_rsa}"/>
       <param name="sks.pin" value="1234"/>
       <param name="card.type" value="CoolCard"/>
       <param name="card.number" value="8645780023940312"/>
       <param name="sks.image" value="coolcard.png"/>
       <param name="sks.encryption" value="${encryptionkey_ec}"/>
     </antcall>
     <antcall target="_import">
       <param name="sks.certificate" value="${clientkey_ec_other}"/>
       <param name="sks.pin" value="1234"/>
       <param name="card.type" value="@"/>
       <param name="card.number" value="8888000033334444"/>
       <param name="sks.image" value="unusualcard.png"/>
       <param name="sks.encryption" value="@"/>
     </antcall>
     <antcall target="_import">
       <param name="sks.certificate" value="${clientkey_ec2}"/>
       <param name="sks.pin" value="1234"/>
       <param name="card.type" value="UnusualCard"/>
       <param name="card.number" value="1111222233334444"/>
       <param name="sks.image" value="unusualcard.png"/>
       <param name="sks.encryption" value="@"/>
     </antcall>
  </target>
  
  <target name="_createcert">
  	<java fork="yes"
  		  classname="org.webpki.ca.CommandLineCA"
  		  dir="${key.dir}"
		  failonerror="true">
  		<classpath>
  			 <fileset dir="${common.lib.dir}">
  		        <include name="*.jar"/>
  			 </fileset>
  		</classpath>
  	    <arg line="${cmd} -out/keyalias mykey"/>
  	</java>
  </target>

  <target name="_getroot">
	<exec executable="keytool" failonerror="true" dir="${key.dir}">
	  <arg line="-exportcert -keystore ${rootfile}${keyfilext} -alias mykey -storepass ${keypassword} -storetype ${storetype} -file ${rootfile}.cer"/>
	</exec>
  </target>
  
  <target name="_certpaymentnetwork">
    <antcall target="_createcert">
       <param name="cmd" value="-selfsigned -entity/ca -subject &quot;CN=Payment Network Root CA1, C=US&quot; -validity/start 2010-07-10T10:00:00 -validity/end 2030-07-10T09:59:59 -out/storetype ${storetype} -out/keystore ${paymentroot}${keyfilext} -out/storepass ${keypassword} -out/keypass ${keypassword} -keysize 4096 -sigalg RSA_SHA512 -serial 1"/>
    </antcall>
    <antcall target="_getroot">
       <param name="rootfile" value="${paymentroot}"/>
    </antcall>
    <antcall target="_createcert">
       <param name="cmd" value="-ca/keypass ${keypassword} -ca/storetype ${storetype} -ca/storepass ${keypassword} -ca/keystore payment-network-rootca${keyfilext} -entity/ca -subject &quot;CN=Payment Network Sub CA3, C=EU&quot; -validity/start 2012-07-10T10:00:00 -validity/end 2025-07-10T09:59:59 -out/storetype ${storetype} -out/keystore temp-subca${keyfilext} -out/storepass ${keypassword} -out/keypass ${keypassword} -ecccurve NIST_P_256 -sigalg RSA_SHA512 -serial 3"/>
    </antcall>
    <antcall target="_createcert">
       <param name="cmd" value=" -ca/addpath all -ca/keypass ${keypassword} -ca/storetype ${storetype} -ca/storepass ${keypassword} -ca/keystore temp-subca${keyfilext} -entity/ee -subject &quot;CN=mybank.com, serialNumber=4501, C=FR&quot; -validity/start 2014-01-01T00:00:00 -validity/end 2020-07-10T09:59:59 -out/storetype ${storetype} -out/keystore ${bankkey}${keyfilext} -out/storepass ${keypassword} -out/keypass ${keypassword} -ecccurve NIST_P_256 -sigalg ECDSA_SHA256"/>
    </antcall>
  </target>

 <target name="_certmerchants">
    <antcall target="_createcert">
       <param name="cmd" value="-selfsigned -entity/ca -subject &quot;CN=Merchant Network Root CA1, C=US&quot; -validity/start 2010-07-10T10:00:00 -validity/end 2030-07-10T09:59:59 -out/storetype ${storetype} -out/keystore ${merchantroot}${keyfilext} -out/storepass ${keypassword} -out/keypass ${keypassword} -keysize 4096 -sigalg RSA_SHA512 -serial 1"/>
    </antcall>
    <antcall target="_getroot">
       <param name="rootfile" value="${merchantroot}"/>
    </antcall>
    <antcall target="_createcert">
       <param name="cmd" value="-ca/keypass ${keypassword} -ca/storetype ${storetype} -ca/storepass ${keypassword} -ca/keystore ${merchantroot}${keyfilext} -entity/ca -subject &quot;CN=Merchant Network Sub CA5, C=DE&quot; -validity/start 2012-07-10T10:00:00 -validity/end 2025-07-10T09:59:59 -out/storetype ${storetype} -out/keystore temp-subca${keyfilext} -out/storepass ${keypassword} -out/keypass ${keypassword} -keysize 2048 -sigalg RSA_SHA512 -serial 5"/>
    </antcall>
    <antcall target="_createcert">
       <param name="cmd" value=" -ca/addpath all -ca/keypass ${keypassword} -ca/storetype ${storetype} -ca/storepass ${keypassword} -ca/keystore temp-subca${keyfilext} -entity/ee -subject &quot;CN=Demo Merchant, serialNumber=896325, C=DE&quot; -validity/start 2014-01-01T00:00:00 -validity/end 2020-07-10T09:59:59 -out/storetype ${storetype} -out/keystore ${merchantkey}${keyfilext} -out/storepass ${keypassword} -out/keypass ${keypassword}  -sigalg RSA_SHA256 -keysize 2048"/>
    </antcall>
  </target>

  <target name="_clientcert">
    <antcall target="_createcert">
       <param name="cmd" value="-selfsigned -entity/ca -subject &quot;CN=Mybank Client Root CA1, C=US&quot; -validity/start 2010-07-10T10:00:00 -validity/end 2030-07-10T09:59:59 -out/storetype ${storetype} -out/keystore ${clientroot}${keyfilext} -out/storepass ${keypassword} -out/keypass ${keypassword} -keysize 4096 -sigalg RSA_SHA512 -serial 1"/>
    </antcall>
    <antcall target="_getroot">
       <param name="rootfile" value="${clientroot}"/>
    </antcall>
    <antcall target="_createcert">
       <param name="cmd" value="-ca/keypass ${keypassword} -ca/storetype ${storetype} -ca/storepass ${keypassword} -ca/keystore ${clientroot}${keyfilext} -entity/ee -subject &quot;CN=Luke Skywalker, serialNumber=95673522&quot; -validity/start 2012-07-10T10:00:00 -validity/end 2025-07-10T09:59:59 -out/storetype ${storetype} -out/keystore ${clientkey_rsa}${keyfilext} -out/storepass ${keypassword} -out/keypass ${keypassword} -keysize 2048 -sigalg RSA_SHA512"/>
    </antcall>
    <antcall target="_createcert">
       <param name="cmd" value="-ca/keypass ${keypassword} -ca/storetype ${storetype} -ca/storepass ${keypassword} -ca/keystore ${clientroot}${keyfilext} -entity/ee -subject &quot;CN=Luke Skywalker, serialNumber=95673522&quot; -validity/start 2012-07-10T10:00:00 -validity/end 2025-07-10T09:59:59 -out/storetype ${storetype} -out/keystore ${clientkey_ec}${keyfilext} -out/storepass ${keypassword} -out/keypass ${keypassword} -ecccurve NIST_P_256 -sigalg RSA_SHA512"/>
    </antcall>
    <antcall target="_createcert">
       <param name="cmd" value="-ca/keypass ${keypassword} -ca/storetype ${storetype} -ca/storepass ${keypassword} -ca/keystore ${clientroot}${keyfilext} -entity/ee -subject &quot;CN=Luke Skywalker, serialNumber=95673522&quot; -validity/start 2012-07-10T10:00:00 -validity/end 2025-07-10T09:59:59 -out/storetype ${storetype} -out/keystore ${clientkey_ec2}${keyfilext} -out/storepass ${keypassword} -out/keypass ${keypassword} -ecccurve NIST_P_521 -sigalg RSA_SHA512"/>
    </antcall>
    <antcall target="_createcert">
       <param name="cmd" value="-ca/keypass ${keypassword} -ca/storetype ${storetype} -ca/storepass ${keypassword} -ca/keystore ${clientroot}${keyfilext} -entity/ee -subject &quot;CN=Luke Skywalker, serialNumber=95673522&quot; -validity/start 2012-07-10T10:00:00 -validity/end 2025-07-10T09:59:59 -out/storetype ${storetype} -out/keystore ${clientkey_ec_other}${keyfilext} -out/storepass ${keypassword} -out/keypass ${keypassword} -ecccurve NIST_P_256 -sigalg RSA_SHA512"/>
    </antcall>
  </target>

  <target name="_authencryption">
    <antcall target="_createcert">
       <param name="cmd" value="-selfsigned -entity/ee -subject &quot;CN=Mybank Encryption Key1&quot; -validity/start 2010-07-10T10:00:00 -validity/end 2030-07-10T09:59:59 -out/storetype ${storetype} -out/keystore ${encryptionkey_rsa}${keyfilext} -out/storepass ${keypassword} -out/keypass ${keypassword} -keysize 2048 -sigalg RSA_SHA256 -serial 1"/>
    </antcall>
    <antcall target="_getroot">
       <param name="rootfile" value="${encryptionkey_rsa}"/>
    </antcall>
    <antcall target="_createcert">
       <param name="cmd" value="-selfsigned -entity/ee -subject &quot;CN=Mybank Encryption Key1&quot; -validity/start 2010-07-10T10:00:00 -validity/end 2030-07-10T09:59:59 -out/storetype ${storetype} -out/keystore ${encryptionkey_ec}${keyfilext} -out/storepass ${keypassword} -out/keypass ${keypassword} -ecccurve NIST_P_256 -sigalg ECDSA_SHA256 -serial 1"/>
    </antcall>
    <antcall target="_getroot">
       <param name="rootfile" value="${encryptionkey_ec}"/>
    </antcall>
  </target>
  
  <target name="createcerts">
    <antcall target="_certpaymentnetwork"/>
    <antcall target="_certmerchants"/>
    <antcall target="_clientcert"/>
    <antcall target="_authencryption"/>
    <delete>
  	  <fileset dir="${key.dir}">
  		<include name="temp*"/>
  	  </fileset>
    </delete>    
  </target>
  
</project>
